/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.hopeconsultants.user.favorite.site.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.hopeconsultants.user.favorite.site.model.FavoriteSite;
import org.hopeconsultants.user.favorite.site.model.FavoriteSiteModel;
import org.hopeconsultants.user.favorite.site.service.persistence.FavoriteSitePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FavoriteSite service. Represents a row in the &quot;UserFavoriteSite_FavoriteSite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FavoriteSiteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FavoriteSiteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FavoriteSiteImpl
 * @see FavoriteSite
 * @see FavoriteSiteModel
 * @generated
 */
@ProviderType
public class FavoriteSiteModelImpl extends BaseModelImpl<FavoriteSite>
	implements FavoriteSiteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a favorite site model instance should use the {@link FavoriteSite} interface instead.
	 */
	public static final String TABLE_NAME = "UserFavoriteSite_FavoriteSite";
	public static final Object[][] TABLE_COLUMNS = {
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table UserFavoriteSite_FavoriteSite (groupId LONG not null,userId LONG not null,primary key (groupId, userId))";
	public static final String TABLE_SQL_DROP = "drop table UserFavoriteSite_FavoriteSite";
	public static final String ORDER_BY_JPQL = " ORDER BY favoriteSite.id.groupId ASC, favoriteSite.id.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UserFavoriteSite_FavoriteSite.groupId ASC, UserFavoriteSite_FavoriteSite.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.hopeconsultants.user.favorite.site.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.hopeconsultants.user.favorite.site.model.FavoriteSite"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.hopeconsultants.user.favorite.site.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.hopeconsultants.user.favorite.site.model.FavoriteSite"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.hopeconsultants.user.favorite.site.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.hopeconsultants.user.favorite.site.model.FavoriteSite"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.hopeconsultants.user.favorite.site.service.util.ServiceProps.get(
				"lock.expiration.time.org.hopeconsultants.user.favorite.site.model.FavoriteSite"));

	public FavoriteSiteModelImpl() {
	}

	@Override
	public FavoriteSitePK getPrimaryKey() {
		return new FavoriteSitePK(_groupId, _userId);
	}

	@Override
	public void setPrimaryKey(FavoriteSitePK primaryKey) {
		setGroupId(primaryKey.groupId);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new FavoriteSitePK(_groupId, _userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((FavoriteSitePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return FavoriteSite.class;
	}

	@Override
	public String getModelClassName() {
		return FavoriteSite.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public FavoriteSite toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FavoriteSite)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FavoriteSiteImpl favoriteSiteImpl = new FavoriteSiteImpl();

		favoriteSiteImpl.setGroupId(getGroupId());
		favoriteSiteImpl.setUserId(getUserId());

		favoriteSiteImpl.resetOriginalValues();

		return favoriteSiteImpl;
	}

	@Override
	public int compareTo(FavoriteSite favoriteSite) {
		FavoriteSitePK primaryKey = favoriteSite.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FavoriteSite)) {
			return false;
		}

		FavoriteSite favoriteSite = (FavoriteSite)obj;

		FavoriteSitePK primaryKey = favoriteSite.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FavoriteSiteModelImpl favoriteSiteModelImpl = this;

		favoriteSiteModelImpl._originalGroupId = favoriteSiteModelImpl._groupId;

		favoriteSiteModelImpl._setOriginalGroupId = false;

		favoriteSiteModelImpl._originalUserId = favoriteSiteModelImpl._userId;

		favoriteSiteModelImpl._setOriginalUserId = false;

		favoriteSiteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FavoriteSite> toCacheModel() {
		FavoriteSiteCacheModel favoriteSiteCacheModel = new FavoriteSiteCacheModel();

		favoriteSiteCacheModel.favoriteSitePK = getPrimaryKey();

		favoriteSiteCacheModel.groupId = getGroupId();

		favoriteSiteCacheModel.userId = getUserId();

		return favoriteSiteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("org.hopeconsultants.user.favorite.site.model.FavoriteSite");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = FavoriteSite.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			FavoriteSite.class, ModelWrapper.class
		};
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _columnBitmask;
	private FavoriteSite _escapedModel;
}